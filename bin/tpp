#!/usr/bin/env ruby
require_relative '../lib/tp_plus'
require 'ppr'
require 'optparse'
require 'deep_clone'

options = {}
#make options global ** PATCH ** for options access in nodes
$global_options = options

#global var stack
$stacks = TPPlus::Stacks.new
#dummy variable counter
$dvar_counter = 0

#flag for printing functions
options[:function_print] = true

#list ofr include directories
options[:include] = []

OptionParser.new do |opts|
  opts.banner = "Usage: tpp [options] filename"

  #go through args look for \I"Folder" and reformat
  #this is needed to work with rossum
  opts.default_argv.each_with_index do |a, i|
    if a.start_with?("/I")
      include_folder = a.dup
      include_folder.sub! '/I', ''
      include_folder.sub! '"', ''
      include_folder.sub! '"', ''
      include_folder.gsub! '/', '\\'
      opts.default_argv[i] = '-i'
      opts.default_argv.insert(i+1, include_folder)
    end
  end

  opts.on("-e", "--environment <file>", "Require an environment file <file> before parsing") do |e|
    options[:environment] = e
  end

  opts.on("-i", "--include <folder>", "include folder <folder> for imports") do |i|
    options[:include].append(i)
    raise "Include directory #{i}, was not found" unless File.directory?(i)
  end

  opts.on("-k karelenv, clear_reg, rossumenv", "--karel-environment <filename>, <clear_registers>, <rossum_name>", Array, "build karel script to rename/reset all registers using the environment file") do |k|
    if k[1].instance_of?(String)
      clr_reg = TPPlus::Util.to_boolean(k[1].strip)
    else
      clr_reg = k[1]
    end
    options[:karel] = k[0].strip
    options[:clear_registers] = clr_reg
    if k.length() > 2
      options[:rossumvar] = k[2].strip
    end
  end

  opts.on("-o", "--output <file>", "Write output to <file>") do |o|
    options[:output] = o
    options[:output_folder] = File.dirname(o)
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

if ARGV.length != 1
  puts "Must provide filename argument. See tpp --help for details"
  exit
end

tpp_filename = File.basename(ARGV[0],".*")

if options[:output]
  # ensure filename matches (FANUC parser will complain otherwise)
  output_filename = File.basename(options[:output], ".*")
  if output_filename != tpp_filename
    puts "Output filename <#{output_filename}> does not match input filename <#{tpp_filename}>"
    exit
  end
end

#include current folder directory in includes
options[:include].append(File.dirname(ARGV[0]))
#check that include directories exist
options[:include].each do |i|
  raise "Include directory #{i}, was not found" unless File.directory?(i)
end

def contents(filename)
  if !File.exist?(filename)
    puts "File <#{filename}> does not exist"
    exit
  end
  f = File.open(filename,'rb')
  src = f.read
  f.close
  return src
end

scanner = TPPlus::Scanner.new
parser = TPPlus::Parser.new(scanner)
interpreter = parser.interpreter
if options[:environment]
  interpreter.load_environment(options[:environment])

  #build karel file if option is set
  if options[:karel]
    rossumconfig = ''
    if options[:rossumvar]
      rossumconfig = options[:rossumvar]
    end
    karelenv = TPPlus::Karel::Environment.new(options[:karel], rossumconfig, 'tbl')
    karelenv.set_clear_registers(options[:clear_registers])
    karelenv.gather_variables(interpreter)
    karelenv.build_list
    #build karel hash table
    karelenv.makefile
    #build rossum enum file
    if options[:rossumvar]
      karelenv.makeconfig
    end
  end
end

src = contents(ARGV[0])

scanner.scan_setup(src)
parser.parse

lines = interpreter.eval

#list warning messages
lines += interpreter.list_warnings

output = %(/PROG #{tpp_filename.upcase}
/ATTR
COMMENT = "#{interpreter.header_data[:comment] || tpp_filename.upcase}";
TCD:  STACK_SIZE	= 0,
      TASK_PRIORITY	= 50,
      TIME_SLICE	= 0,
      BUSY_LAMP_OFF	= 0,
      ABORT_REQUEST	= 0,
      PAUSE_REQUEST	= #{interpreter.header_data[:ignore_pause] ? "7" : "0"};
DEFAULT_GROUP = #{interpreter.header_data[:group_mask] || "1,*,*,*,*"};\n)

#add tool application data
output += "/APPL\n"
interpreter.header_appl_data.each do |n|
  output += n.write(interpreter)
end


output += "/MN\n"

#put guard in to not output the file if there are no instructions
line_count = 0
lines.each_line do |line|
  output += " : " + line
  line_count += 1 if line.strip.tr(';', '').length > 0
end

if interpreter.pos_section != ""
  output += "/POS\n"
  output += interpreter.pos_section
elsif (interpreter.pose_list)
  output += "/POS\n"
  output += interpreter.pose_list.eval
end

output += %(/END\n)

#write functions to disk
output += interpreter.output_functions(options)

if line_count > 0
  if options[:output]
    # write to file
    File.write(options[:output], output)
  else
    print output
  end
end
